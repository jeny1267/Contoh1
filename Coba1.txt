class Node:
    def __init__(self, nama, usia):
        self.nama = nama
        self.usia = usia
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self):
        self.root = None

    def tambah_penduduk(self, nama, usia):
        self.root = self._tambah_penduduk(self.root, nama, usia)

    def _tambah_penduduk(self, root, nama, usia):
        if root is None:
            return Node(nama, usia)
        if nama < root.nama:
            root.left = self._tambah_penduduk(root.left, nama, usia)
        else:
            root.right = self._tambah_penduduk(root.right, nama, usia)
        return root

    def tampilkan_urut_nama(self):
        self._tampilkan_urut_nama(self.root)

    def _tampilkan_urut_nama(self, root):
        if root:
            self._tampilkan_urut_nama(root.left)
            print(f"{root.nama} - {root.usia} tahun")
            self._tampilkan_urut_nama(root.right)

    def tampilkan_urut_usia(self):
        self._tampilkan_urut_usia(self.root)

    def _tampilkan_urut_usia(self, root):
        if root:
            self._tampilkan_urut_usia(root.left)
            print(f"{root.nama} - {root.usia} tahun")
            self._tampilkan_urut_usia(root.right)

# Main program
tree = BinaryTree()

while True:
    print("Pilih Menu:")
    print("1. Tambah Penduduk")
    print("2. Tampilkan Urut Nama")
    print("3. Tampilkan Urut Usia")
    print("4. Keluar")
    
    pilihan = int(input("Pilihan Anda: "))

    if pilihan == 1:
        nama = input("Masukkan Nama: ")
        usia = int(input("Masukkan Usia: "))
        tree.tambah_penduduk(nama, usia)
        print("Data berhasil ditambahkan!")

    elif pilihan == 2:
        print("Daftar Penduduk:")
        tree.tampilkan_urut_nama()

    elif pilihan == 3:
        print("Daftar Penduduk:")
        tree.tampilkan_urut_usia()

    elif pilihan == 4:
        break

    else:
        print("Pilihan tidak valid. Silakan coba lagi.")









Buatlah sebuah program menggunakan struktur data Binary Tree untuk menyimpan data Mahasiswa yang memiliki 2 atribut, yaitu nama dan ipk. Program memiliki fungsi untuk menambah data dan menampilkan data. Data dapat ditampilkan urut berdasarkan nama atau urut berdasarkan IPK.

Contoh Penambahan Data:
Pilih Menu:
1. Tambah Mahasiswa
2. Tampilkan Urut Nama
3. Tampilkan Urut IPK
Pilihan Anda: 1
Masukkan Nama: Agus
Masukkan IPK: 2.75
Data berhasil ditambahkan!

Contoh menampilkan data urut berdasarkan nama:
Pilih Menu:
1. Tambah Mahasiswa
2. Tampilkan Urut Nama
3. Tampilkan Urut IPK
Pilihan Anda: 2
Daftar Mahasiswa:
Agus - 2.75
Chandra - 2.5

Contoh menampilkan data urut berdasarkan IPK:
Pilih Menu:
1. Tambah Mahasiswa
2. Tampilkan Urut Nama
3. Tampilkan Urut IPK
Pilihan Anda: 3
Daftar Mahasiswa:
Chandra - 2.5
Agus - 2.75





class Node:
    def __init__(self, nama, ipk):
        self.nama = nama
        self.ipk = ipk
        self.left = None
        self.right = None

def tambah_mahasiswa(root, nama, ipk):
    if root is None:
        return Node(nama, ipk)
    else:
        if nama < root.nama:
            root.left = tambah_mahasiswa(root.left, nama, ipk)
        else:
            root.right = tambah_mahasiswa(root.right, nama, ipk)
    return root

def tampilkan_nama(root):
    if root:
        tampilkan_nama(root.left)
        print(root.nama, "-", root.ipk)
        tampilkan_nama(root.right)

def tampilkan_ipk(root):
    if root:
        tampilkan_ipk(root.left)
        print(root.nama, "-", root.ipk)
        tampilkan_ipk(root.right)

root = None

while True:
    print("Pilih Menu:")
    print("1. Tambah Mahasiswa")
    print("2. Tampilkan Urut Nama")
    print("3. Tampilkan Urut IPK")
    pilihan = int(input("Pilihan Anda: "))

    if pilihan == 1:
        nama = input("Masukkan Nama: ")
        ipk = float(input("Masukkan IPK: "))
        root = tambah_mahasiswa(root, nama, ipk)
        print("Data berhasil ditambahkan!")

    elif pilihan == 2:
        print("Daftar Mahasiswa:")
        tampilkan_nama(root)

    elif pilihan == 3:
        print("Daftar Mahasiswa:")
        tampilkan_ipk(root)

    else:
        print("Pilihan tidak valid!")


