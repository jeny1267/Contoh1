class Node:
    def __init__(self, nama, usia):
        self.nama = nama
        self.usia = usia
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self):
        self.root = None

    def tambah_penduduk(self, nama, usia):
        self.root = self._tambah_penduduk(self.root, nama, usia)

    def _tambah_penduduk(self, root, nama, usia):
        if root is None:
            return Node(nama, usia)
        if nama < root.nama:
            root.left = self._tambah_penduduk(root.left, nama, usia)
        else:
            root.right = self._tambah_penduduk(root.right, nama, usia)
        return root

    def tampilkan_urut_nama(self):
        self._tampilkan_urut_nama(self.root)

    def _tampilkan_urut_nama(self, root):
        if root:
            self._tampilkan_urut_nama(root.left)
            print(f"{root.nama} - {root.usia} tahun")
            self._tampilkan_urut_nama(root.right)

    def tampilkan_urut_usia(self):
        self._tampilkan_urut_usia(self.root)

    def _tampilkan_urut_usia(self, root):
        if root:
            self._tampilkan_urut_usia(root.left)
            print(f"{root.nama} - {root.usia} tahun")
            self._tampilkan_urut_usia(root.right)

# Main program
tree = BinaryTree()

while True:
    print("Pilih Menu:")
    print("1. Tambah Penduduk")
    print("2. Tampilkan Urut Nama")
    print("3. Tampilkan Urut Usia")
    print("4. Keluar")
    
    pilihan = int(input("Pilihan Anda: "))

    if pilihan == 1:
        nama = input("Masukkan Nama: ")
        usia = int(input("Masukkan Usia: "))
        tree.tambah_penduduk(nama, usia)
        print("Data berhasil ditambahkan!")

    elif pilihan == 2:
        print("Daftar Penduduk:")
        tree.tampilkan_urut_nama()

    elif pilihan == 3:
        print("Daftar Penduduk:")
        tree.tampilkan_urut_usia()

    elif pilihan == 4:
        break

    else:
        print("Pilihan tidak valid. Silakan coba lagi.")









Buatlah sebuah program menggunakan struktur data Binary Tree untuk menyimpan data Mahasiswa yang memiliki 2 atribut, yaitu nama dan ipk. Program memiliki fungsi untuk menambah data dan menampilkan data. Data dapat ditampilkan urut berdasarkan nama atau urut berdasarkan IPK.

Contoh Penambahan Data:
Pilih Menu:
1. Tambah Mahasiswa
2. Tampilkan Urut Nama
3. Tampilkan Urut IPK
Pilihan Anda: 1
Masukkan Nama: Agus
Masukkan IPK: 2.75
Data berhasil ditambahkan!

Contoh menampilkan data urut berdasarkan nama:
Pilih Menu:
1. Tambah Mahasiswa
2. Tampilkan Urut Nama
3. Tampilkan Urut IPK
Pilihan Anda: 2
Daftar Mahasiswa:
Agus - 2.75
Chandra - 2.5

Contoh menampilkan data urut berdasarkan IPK:
Pilih Menu:
1. Tambah Mahasiswa
2. Tampilkan Urut Nama
3. Tampilkan Urut IPK
Pilihan Anda: 3
Daftar Mahasiswa:
Chandra - 2.5
Agus - 2.75

sesuai dengan contoh program dibawah ini:
class Node:
2 #constructor
3 def __init__(self, data, parent):
4 self._data = data
5 self._parent = parent
6 self._left = None
7 self._right = None
8
9 #menambah data
10 def insert(self, data):
11 if data < self.operator():
12 if self.left() is None:
13 self._left = Node(data, self)
14 else:
15 self.left().insert(data)
16 elif data > self.operator():
17 if self.right() is None:
18 self._right = Node(data, self)
19 else:
20 self.right().insert(data)
21 else:
22 return False #jika tidak berhasil menambah data
23 return True #jika berhasil menambah data
24
25 #mendapatkan isi elemen
26 def operator(self):
27 return self._data
28
29 #mendapatkan child sebelah kiri
30 def left(self):
31 return self._left
32
33 #mendapatkan child sebelah kanan
34 def right(self):
35 return self._right
36
37 #mendapatkan node parent
38 def parent(self):
39 return self._parent
40
41 #mengecek apakah node merupakan root
128 Bab 13. Binary Tree
42 def isRoot(self):
43 return self._parent is None
44
45 #mengecek apakah node merupakan external/leaf
46 def isExternal(self):
47 return self._left is None and self._right is None
class BinaryTree:
2 #constructor
3 def __init__(self):
4 self._root = None
5 self._size = 0
6
7 #menambah data
8 def add(self, data):
9 if self._root is None:
10 self._root = Node(data, None)
11 self._size+=1
12 else:
13 if self._root.insert(data):
14 self._size+=1
15
16 #mendapatkan jumlah node dari tree
17 def size(self):
18 return self._size
19
20 #mengecek apakah tree kosong
21 def empty(self):
22 return self._size == 0
23
24 #mencetak seluruh node
25 def nodes(self):
26 self.inorder(self._root)
27
28 #inorder traversal
29 def inorder(self, node):
30 if node is not None:
31 self.inorder(node.left())
32 print(node.operator(), end = ' ')
33 self.inorder(node.right())




class Node:
    def __init__(self, nama, ipk):
        self.nama = nama
        self.ipk = ipk
        self.left = None
        self.right = None

def tambah_mahasiswa(root, nama, ipk):
    if root is None:
        return Node(nama, ipk)
    else:
        if nama < root.nama:
            root.left = tambah_mahasiswa(root.left, nama, ipk)
        else:
            root.right = tambah_mahasiswa(root.right, nama, ipk)
    return root

def tampilkan_nama(root):
    if root:
        tampilkan_nama(root.left)
        print(root.nama, "-", root.ipk)
        tampilkan_nama(root.right)

def tampilkan_ipk(root):
    if root:
        tampilkan_ipk(root.left)
        print(root.nama, "-", root.ipk)
        tampilkan_ipk(root.right)

root = None

while True:
    print("Pilih Menu:")
    print("1. Tambah Mahasiswa")
    print("2. Tampilkan Urut Nama")
    print("3. Tampilkan Urut IPK")
    pilihan = int(input("Pilihan Anda: "))

    if pilihan == 1:
        nama = input("Masukkan Nama: ")
        ipk = float(input("Masukkan IPK: "))
        root = tambah_mahasiswa(root, nama, ipk)
        print("Data berhasil ditambahkan!")

    elif pilihan == 2:
        print("Daftar Mahasiswa:")
        tampilkan_nama(root)

    elif pilihan == 3:
        print("Daftar Mahasiswa:")
        tampilkan_ipk(root)

    else:
        print("Pilihan tidak valid!")


